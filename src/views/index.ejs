<%- include('templates/header'); -%>

<body>
  <script>
    let tags = function (bug) {
      let tags = "";
      bug.tags.forEach(tag => {
        tags += '<span class="mx-1 my-1 badge badge-' + tag.colour+ '">' + tag.name + '</span>'
      });
      return tags;
    }

    let bugColour = (bug) => {
      if (bug.status === 'Created') {
          return 'danger';
        }
        if (bug.status === 'In-Progress') {
          return 'warning';
        }
        if (bug.status === 'Fixed') {
          return 'success';
        }
    }

    let editClick = async (bugId) => {
      console.log("Clicked: " +bugId);
      let result = await fetch('/bugs/getBugByIdJson', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({
          bugID: bugId
        })
      });

      let bug = await result.json();
      handleNewBugClick();
      document.getElementById('bugId').value = bug._id;
      document.getElementById('name').innerHTML = bug.name;
      document.getElementById('status').innerHTML = '<span class="fas fa-bug text-'+bugColour(bug)+' mr-2"></span>' + bug.status;
      console.log("Lenght:" +bug.description);
      document.getElementById('description').innerHTML = bug.description.length > 0 ? bug.description : "Enter Description Here...";  
      document.getElementById('modalTagList').innerHTML = tags(bug);
      document.getElementById('author').innerHTML = '<span class="badge badge-pill badge-light mr-2">'+bug.author.charAt(0)+'</span>' + bug.author;
      document.getElementById('prevTitle').value = bug.name;

      let date = new Date(bug.date).toLocaleDateString();
      document.getElementById('date').innerHTML = date;
    }

    let loadBugs = async () => {
      let bugs = await fetch("/bugs/getBugsJson");
      let json = await bugs.json();

      let created = document.getElementById("Created");
      let inProgress = document.getElementById("In-Progress");
      let fixed = document.getElementById("Fixed");

      created.innerHTML = null;
      inProgress.innerHTML = null;
      fixed.innerHTML = null;

      let template = function (bug, tags) {
        let template = '<li class="list-group-item" bugid="'+bug._id+'"' +
          '<div class="card">' +
          '<div class="card-body">' +
          '<div class="row">' +
          '<button onclick="editClick(\''+bug._id+'\')" class="badge badge-light col-1 offset-11"><span class="fa fa-edit"></span></button>' +
          tags +
          '</div>' +
          '<br>' +
          '<h5 class="card-title">' + bug.name + '</h5>' +
          '<hr>' +
          '<span class="far fa-comments ml-4">  ' + bug.comments.length + '</span>' +
          '</div>' +
          '</div>' + 
          '</li>'
        return template;
      }

      json.forEach(bug => {
        console.log(bug);
        if (bug.status === 'Created') {
          created.innerHTML += template(bug, tags(bug));
        }
        if (bug.status === 'In-Progress') {
          inProgress.innerHTML += template(bug, tags(bug));
        }
        if (bug.status === 'Fixed') {
          fixed.innerHTML += template(bug, tags(bug));
        }
      });

      created.innerHTML += getButtonTemplate('Created');
      inProgress.innerHTML += getButtonTemplate('In-Progress');
      fixed.innerHTML += getButtonTemplate('Fixed');
    };
    
    function getButtonTemplate (status) {
      let button = document.createElement('bug-new-button');
      let shadowButton = button.shadowRoot.firstElementChild;
      shadowButton.setAttribute('id', 'btn'+status);
      console.log(shadowButton);
      return shadowButton.outerHTML;
    }
      

    let bugStatusUpdater = async (bugID, status)=>{
      console.log(status);
      let result = await fetch('/bugs/updateStatus', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({
          bugID: bugID,
          status: status
        })
      });
    }

    let dragger = () => {
      dragula([
        document.querySelector("#Created"),
        document.querySelector("#In-Progress"),
        document.querySelector("#Fixed"),
      ]).on('drop', function (el, target) {
          bugStatusUpdater(el.getAttribute('bugid'), target.getAttribute('id'));
      });
      console.log("Loaded");
    };

    let initialize = () => {
      loadBugs();
      dragger();
    };
    window.onload = initialize;
  </script>

  <script>
    function handleNewBugClick() {
      $('#addBugModal').modal('show');
    }
  </script>

  <script>
    function addCardMini(button) {
      console.log(button);
      let template = document.createElement('bug-new-form');
      let shadowTemplate = template.shadowRoot.firstElementChild;
      console.log(shadowTemplate);
      button.outerHTML = shadowTemplate.outerHTML;
    }

    async function addBugFocusOut(elementID) {
    let addBugTemplate = document.getElementById(elementID);
    let status = addBugTemplate.getAttribute('status');
    let addButton = getButtonTemplate(status);
    addBugTemplate.outerHTML = addButton;
  }
  </script>

  <div>
    <img class="weedle" src="/weedle.gif">
  </div>

  <!--BUG CONTAINERS-->
  <div id="main">
    <div class="row">
      <h5 class="alert alert-danger col-4">Created</h5>
      <h5 class="alert alert-warning col-4">In-Progress</h5>
      <h5 class="alert alert-success col-4">Fixed</h5>
    </div>
    <div class="row">
      <div class="container col-3" id="Created" >
      </div>
      <div class="container col-3" id="In-Progress">
      </div>
      <div class="container col-3" id="Fixed">
      </div>
    </div>
  </div>
</body>

<script>
  let tagColour = "";
  function setColour(colour) {
    tagColour = colour;
  }
  
  async function addTag() {
    let bugId = document.getElementById('bugId').value;
    let tagName = document.getElementById('tag-name').value;
    let tag = {
      name: tagName, 
      colour: tagColour
    };
    let result = await fetch('/bugs/addTag', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({
          id: bugId,
          tag: tag  
        })
    });

    loadBugs();
    editClick(bugId);
  }

  async function descClick(elementID) {
    console.log('desClick:' + elementID);
    let desc = document.getElementById(elementID);
    desc.classList.add('form-control');
    desc.setAttribute('onclick', 'null');
    desc.setAttribute('contenteditable', true);
    desc.focus();
  }

  async function descFocusOut(elementID) {
    let desc = document.getElementById(elementID);
    updateDescription();
    desc.classList.remove('form-control');
    desc.setAttribute('onclick', 'descClick(\''+elementID+'\')');
    console.log('desFocusOut:' + elementID);
    desc.setAttribute('contenteditable', false);
  }
</script>

<script>
  async function updateDescription() {
    let desc = document.getElementById('description').innerHTML;
    let title = document.getElementById('name').innerHTML;
    let bugId = document.getElementById('bugId').value;
    let prev = document.getElementById('prevTitle').value;

    title.trim();
    console.log(title);
    if(title.length <= 0) {
      title = prev;
    }
    let updateObject = {
      name: title,
      description: desc,
    }
    console.log("Description Changed" + updateObject);
    let result = await fetch('/bugs/update', {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({
        id: bugId,
        updateObject: updateObject
      })
    })

  loadBugs();
  editClick(bugId);
  }
</script>

<!--MODAL-->
<div class="modal" tabindex="-1" role="dialog" id="addBugModal">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
            <input id=prevTitle hidden>
            <span onclick="descClick('name')" onfocusout="descFocusOut('name')" name="name" id="name" class=""></span>
        </h5>
      <href data-dismiss="modal" class="close" aria-label="Close" onfocus="" style="cursor: pointer;">
          <span class="fas fa-times-circle" aria-hidden="true"></span>
        </href>
      </div>
      <div class="modal-body">
        <div class="">
          <h5 class="" name="status" id="status"></h5>
        </div>
        <hr>
        <body>
          <%- include('templates/scriptsection'); -%>
      
          <div class="row">
            <div id="modalTagList"></div>
            <div class="dropdown">
              <button class="badge badge-secondary dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="fa fa-plus"></span>
              </button>
              <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                <form>
                  <input type="text" id="bugId" hidden>
                  <div class="form-group">
                    <label for="tagName">Name</label><br>
                    <input type="text" id="tag-name" class="form-control"><br>
                    <label for="colour">Select a colour</label>
                    <div>
                      <div id="btn-toolbar" class="btn-toolbar" role="toolbar">
                        <div class="btn-group mr-2 mb-2" role="group">
                          <button type="button" class="btn btn-success" onclick="setColour(this.value)" value="success"></button>
                        </div>
                        <div class="btn-group mr-2 mb-2" role="group">
                          <button type="button" class="btn btn-info" onclick="setColour(this.value)" value="info"></button>
                        </div>
                        <div class="btn-group mr-2 mb-2" role="group">
                          <button type="button" class="btn btn-warning" onclick="setColour(this.value)" value="warning"></button>
                        </div>
                        <div class="btn-group mr-2 mb-2" role="group">
                          <button type="button" class="btn btn-secondary" onclick="setColour(this.value)" value="secondary"></button>
                        </div>
                        <div class="btn-group mr-2 mb-2" role="group">
                          <button type="button" class="btn btn-danger" onclick="setColour(this.value)" value="danger"></button>
                        </div>
                      </div>
                    </div>              
                    <hr>
                    <input onclick="addTag()" class="btn btn-success form-control" type="button" value="Create">
                  </div>
                </form>             
              </div>
            </div>
          </div>
          

          <br>
              <div style="min-height:100px;" class="form-group">
                <label for="description"><span class="fas fa-list-ul mr-1"></span> Description </label><br>
                <div id="descriptionDiv" onclick="descClick('description')" onfocusout="descFocusOut('description')"> 
                  <span style="min-height:100px;" name="description" id="description"  contenteditable="false" class=""></span><br>  
                </div>
              </div>
      </body>
      <hr>
      <div class="row">
        <div name="author" id="author" class="col-4">
        </div>
        <div name="date" id="date" class="col-2 offset-5">
        </div>
      </div>        
      </div>        
    </div>
  </div>
</div>



<!--TEMPLATES-->
<div id="templates" hidden>
  <template id="addButtonTemplate">
    <input onclick="addCardMini(this)" type="button" id="buttonTemplate" status="" class="btn btn-block btn-info" value="+ Add Another Card"/>
  </template>

  <template id="addNewBugTemplate">
    <textarea id="addNewBugTemplate" status="" onfocusout="addBugFocusOut('addNewBugTemplate')" class="form-control">Add a title here...</textarea><br>
    <button type="button" onclick="addBugFocusOut('addNewBugTemplate')">Add Bug</button>
    <href data-dismiss="modal" class="close" aria-label="Close" onfocus="" style="cursor: pointer;">
      <span class="fas fa-times-circle" aria-hidden="true"></span>
    </href>
  </template>

</div>

<script>
  let addBugTemplate = document.getElementById('addNewBugTemplate');
    window.customElements.define('bug-new-form', class extends HTMLElement{
      constructor(){
        super();

        let shadowRoot = this.attachShadow({mode: 'open'});
        shadowRoot.appendChild(addBugTemplate.content.cloneNode(true));
      }
    });

  let addBugButtonTemplate = document.getElementById('addButtonTemplate'); 
  window.customElements.define('bug-new-button', class extends HTMLElement{
      constructor(){
        super();
        let shadowRoot = this.attachShadow({mode: 'open'});
        shadowRoot.appendChild(addBugButtonTemplate.content.cloneNode(true));
      }
    });
</script>

